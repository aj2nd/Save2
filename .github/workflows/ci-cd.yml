name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    env:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: saveai_test
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/saveai_test
      REDIS_URL: redis://localhost:6379/0
      SECRET_KEY: test_secret_key
      BLOCKCHAIN_NODE_URL: http://localhost:8545
      SMART_CONTRACT_ADDRESS: "0x0000000000000000000000000000000000000000"
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: saveai_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          
      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          
      - name: Cache Poetry virtualenv
        uses: actions/cache@v3
        id: poetry-cache
        with:
          path: ./.venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
          
      - name: Install dependencies
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: poetry install --no-interaction
        
      - name: Wait for PostgreSQL
        run: |
          while ! nc -z localhost 5432; do
            echo "Waiting for PostgreSQL to start..."
            sleep 1
          done
        timeout-minutes: 1
        
      - name: Run database migrations
        run: |
          poetry run alembic upgrade head
        
      - name: Run tests
        run: |
          poetry run pytest tests/ -v --cov=saveai --cov-report=xml
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  deploy:
    name: Deploy to Production
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: me-central-1
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: saveai-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            --build-arg POSTGRES_USER=postgres \
            --build-arg POSTGRES_PASSWORD=postgres \
            --build-arg POSTGRES_DB=saveai \
            --build-arg DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -f saveai/deployment/docker/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
      - name: Update ECS service
        run: |
          aws ecs update-service --cluster saveai-cluster \
            --service saveai-api-service \
            --force-new-deployment
