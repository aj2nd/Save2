name: Organize Workflows

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "CONFIRM" to proceed with workflow organization'
        required: true
        type: string

permissions:
  contents: write

jobs:
  organize:
    if: github.event.inputs.confirm == 'CONFIRM'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Git
        run: |
          git config --global user.name "aj2nd"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create workflows directory
        run: mkdir -p .github/workflows

      - name: Create CI/CD workflow
        run: |
          cat > .github/workflows/ci-cd.yml << 'EOL'
          name: CI/CD Pipeline

          on:
            push:
              branches: [ main ]
            pull_request:
              branches: [ main ]
            workflow_dispatch:

          jobs:
            test:
              name: Run Tests
              runs-on: ubuntu-latest
              services:
                postgres:
                  image: postgres:15-alpine
                  env:
                    POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
                    POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
                    POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
                  ports:
                    - 5432:5432
                  options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                
                redis:
                  image: redis:7-alpine
                  ports:
                    - 6379:6379
                  options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

              steps:
                - uses: actions/checkout@v4
                
                - name: Set up Python
                  uses: actions/setup-python@v4
                  with:
                    python-version: '3.11'
                    cache: 'pip'
                    
                - name: Install Poetry
                  run: |
                    curl -sSL https://install.python-poetry.org | python3 -
                    
                - name: Cache Poetry dependencies
                  uses: actions/cache@v3
                  with:
                    path: ~/.cache/pypoetry
                    key: \${{ runner.os }}-poetry-\${{ hashFiles('**/poetry.lock') }}
                    restore-keys: |
                      \${{ runner.os }}-poetry-
                    
                - name: Install dependencies
                  run: poetry install
                  
                - name: Run tests
                  env:
                    DATABASE_URL: postgresql://\${{ secrets.POSTGRES_USER }}:\${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/\${{ secrets.POSTGRES_DB }}
                    REDIS_URL: redis://localhost:6379/0
                    SECRET_KEY: \${{ secrets.SECRET_KEY }}
                    BLOCKCHAIN_NODE_URL: \${{ secrets.BLOCKCHAIN_NODE_URL }}
                    SMART_CONTRACT_ADDRESS: \${{ secrets.SMART_CONTRACT_ADDRESS }}
                  run: |
                    poetry run pytest tests/ --cov=saveai --cov-report=xml
                    
                - name: Upload coverage
                  uses: codecov/codecov-action@v3
                  with:
                    file: ./coverage.xml
                    fail_ci_if_error: true

            deploy:
              name: Deploy to Production
              needs: test
              if: github.ref == 'refs/heads/main'
              runs-on: ubuntu-latest
              
              steps:
                - uses: actions/checkout@v4
                
                - name: Configure AWS credentials
                  uses: aws-actions/configure-aws-credentials@v2
                  with:
                    aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
                    aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
                    aws-region: me-central-1
                    
                - name: Login to Amazon ECR
                  id: login-ecr
                  uses: aws-actions/amazon-ecr-login@v1

                - name: Set up Docker Buildx
                  uses: docker/setup-buildx-action@v2
                    
                - name: Build and push Docker image
                  env:
                    ECR_REGISTRY: \${{ steps.login-ecr.outputs.registry }}
                    ECR_REPOSITORY: saveai-api
                    IMAGE_TAG: \${{ github.sha }}
                  run: |
                    docker buildx build \\
                      --cache-from type=gha \\
                      --cache-to type=gha,mode=max \\
                      --build-arg POSTGRES_USER="\${{ secrets.POSTGRES_USER }}" \\
                      --build-arg POSTGRES_PASSWORD="\${{ secrets.POSTGRES_PASSWORD }}" \\
                      --build-arg POSTGRES_DB="\${{ secrets.POSTGRES_DB }}" \\
                      --build-arg DATABASE_URL="\${{ secrets.DATABASE_URL }}" \\
                      --platform linux/amd64 \\
                      --tag \$ECR_REGISTRY/\$ECR_REPOSITORY:\$IMAGE_TAG \\
                      --tag \$ECR_REGISTRY/\$ECR_REPOSITORY:latest \\
                      --push \\
                      .
                    
                - name: Update ECS service
                  run: |
                    aws ecs update-service --cluster saveai-cluster \\
                      --service saveai-api-service \\
                      --force-new-deployment
          EOL

      - name: Commit changes
        run: |
          git add .github/workflows/
          git commit -m "Organize workflows [automated] - 2025-06-10 15:45:08 UTC"
          git push

      - name: Create summary
        run: |
          echo "## Workflow Organization Complete" >> $GITHUB_STEP_SUMMARY
          echo "✅ Created consolidated CI/CD workflow" >> $GITHUB_STEP_SUMMARY
          echo "✅ Added proper caching for dependencies" >> $GITHUB_STEP_SUMMARY
          echo "✅ Added security improvements" >> $GITHUB_STEP_SUMMARY
